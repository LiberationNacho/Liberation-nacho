@startuml

package java.Liberation.nacho {

    package java.Liberation.nacho.service {

        class DataProcessorService {
            // Add methods here if needed
        }

        abstract class ApiService {
            - String apiKey

            + buildUrl(baseUrl: String, queryParams: String...): String
            + getApiResponse(url: String): String throws IOException
            + handleApiCall(baseUrl: String, queryParams: String...): String
        }

        class CurlService {
            - String apiKey
            - final MemoryCharacterRepository characterRepository
            - final MemoryExpRepository expRepository
            - final MemorySymbolRepository symbolRepository
            - String date

            + CurlService(characterRepository: MemoryCharacterRepository, expRepository: MemoryExpRepository, symbolRepository: MemorySymbolRepository)

            + getOcid(characterName: String): String
            + getInfo(ocid: String): String
            + getStat(ocid: String): String
            + getSymbol(ocid: String): String
            + getUnion(ocid: String): String

            + updateOcid(): void throws IOException, InterruptedException
            + updateInfo(): void throws IOException, InterruptedException
            + updateStat(): void throws IOException, InterruptedException
            + updateSymbol(): void throws IOException, InterruptedException
        }

        class UnionCurlService {
            - final MemoryUnionRepository unionRepository

            + UnionCurlService(unionRepository: MemoryUnionRepository)
            + updateUnionInfo(): void throws IOException, InterruptedException
        }
    }

    package java.Liberation.nacho.repository {

        interface CharacterRepository<T> {
            + init(): void
            + load(): void
            + save(): void
            + put(character: T): void
            + findByName(name: String): Optional<T>
            + findAll(): List<T>
            + deleteByName(name: String): void
        }

        class MemoryCharacterRepository {
            - static Map<String, CharacterInfo> characterStore

            + init(): void
            + load(): void
            + save(): void
            + put(character: CharacterInfo): void
            + findByName(name: String): Optional<CharacterInfo>
            + findAll(): List<CharacterInfo>
            + deleteByName(name: String): void
        }

        class MemoryBossRepository {
            - static Map<String, CharacterBoss> characterBossStore

            + init(): void
            + load(): void
            + save(): void
            + put(characterBoss: CharacterBoss): void
            + findByName(name: String): Optional<CharacterBoss>
            + findAll(): List<CharacterBoss>
            + deleteByName(name: String): void
        }

        class MemoryExpRepository {
            - static Map<String, CharacterExp> characterExpStore

            + init(): void
            + load(): void
            + save(): void
            + put(characterExp: CharacterExp): void
            + findByName(name: String): Optional<CharacterExp>
            + findAll(): List<CharacterExp>
            + deleteByName(name: String): void
        }

        class MemorySymbolRepository {
            - static Map<String, CharacterSymbol> characterSymbolStore

            + init(): void
            + load(): void
            + save(): void
            + put(characterExp: CharacterSymbol): void
            + findByName(name: String): Optional<CharacterSymbol>
            + findAll(): List<CharacterSymbol>
            + deleteByName(name: String): void
        }

        interface SingleRepository<T> {
            + init(): void
            + load(): void
            + save(t: T): void
            + get(): Optional<T>
        }

        class MemoryResultRepository {
            - static Result resultStore

            + init(): void
            + load(): void
            + save(result: Result): void
            + get(): Optional<Result>
        }

        class MemoryUnionRepository {
            - static Union unionStore

            + init(): void
            + load(): void
            + save(union: Union): void
            + get(): Optional<Union>
        }
    }

    package java.Liberation.nacho.domain {

        class Character{
            - String name
            - String ocid
            - String job
            - int level
            - String image
            
            + getName(): String
            + getOcid(): String
            + getjob(): String
            + getLevel(): int
            + getImage(): String
            
            + setName(name: String): void
            + setOcid(ocid: String): void
            + setjob(job: String): void
            + setLevel(level: int): void
            + setImage(image: String): void
        }

        class CharacterInfo {
            - int combat
            - boolean liberation
            - boolean millionSuccess

            + getCombat(): int
            + getLiberation(): boolean
            + getMillionSuccess(): boolean

            + setCombat(combat: int): void
            + setLiberation(liberation: boolean): void
            + setMillionSuccess(millionSuccess: boolean): void
        }

        class CharacterBoss {
            - boolean vanLeon
            - boolean akayrum
            - boolean magnus
            - boolean lotus
            - boolean damien
            - boolean lucid
            - boolean will
            - boolean verusHilla

            + isVanLeon(): boolean
            + isAkayrum(): boolean
            + isMagnus(): boolean
            + isLotus(): boolean
            + isDamien(): boolean
            + isLucid(): boolean
            + isWill(): boolean
            + isVerusHilla(): boolean

            + setVanLeon(vanLeon: boolean): void
            + setAkayrum(akayrum: boolean): void
            + setMagnus(magnus: boolean): void
            + setLotus(lotus: boolean): void
            + setDamien(damien: boolean): void
            + setLucid(lucid: boolean): void
            + setWill(will: boolean): void
            + setVerusHilla(verusHilla: boolean): void
        }

        class CharacterExp {
            - Map<String, Integer> character_level
            - Map<String, Integer> character_exp
            - Map<String, Integer> character_exp_rate

            + getCharacter_level(): Map<String, Integer>
            + getCharacter_exp(): Map<String, Integer>
            + getCharacter_exp_rate(): Map<String, Integer>

            + setCharacter_level(character_level: Map<String, Integer>): void
            + setCharacter_exp(character_exp: Map<String, Integer>): void
            + setCharacter_exp_rate(character_exp_rate: Map<String, Integer>): void
        }

        class CharacterSymbol{

        }

        class Result {
            - String date
            - double jobRate
            - double liberationRate
            - int sumLevel
            - long sumCombat
            - double avgLevel
            - double avgCombat

            + getDate(): String
            + getJobRate(): double
            + getLiberationRate(): double
            + getSumLevel(): int
            + getSumCombat(): long
            + getAvgLevel(): double
            + getAvgCombat(): double

            + setDate(date: String): void
            + setJobRate(jobRate: double): void
            + setLiberationRate(liberationRate: double): void
            + setSumLevel(sumLevel: int): void
            + setSumCombat(sumCombat: long): void
            + setAvgLevel(avgLevel: double): void
            + setAvgCombat(avgCombat: double): void
        }

        class Union {
            - String date
            - int level
            - String grade
            - int artifactLevel
            - int artifactExp
            - int artifactPoint

            + getDate(): String
            + getLevel(): int
            + getGrade(): String
            + getArtifactLevel(): int
            + getArtifactExp(): int
            + getArtifactPoint(): int

            + setDate(date: String): void
            + setLevel(level: int): void
            + setGrade(grade: String): void
            + setArtifactLevel(artifactLevel: int): void
            + setArtifactExp(artifactExp: int): void
            + setArtifactPoint(artifactPoint: int): void
        }
    }

    package java.Liberation.nacho.util {

        class JsonDataHandler {
            - static final String JSON_DATA_PATH = ""
            - static final ObjectMapper objectMapper

            + static <T> T loadJson(filePath: String, valueType: Class<T>): T throws IOException
            + static <T> void saveJson(data: T, filePath: String): void throws IOException
            + static <T> T loadJson(filePath: String, valueTypeRef: TypeReference<T>): T throws IOException
            + static <T> T extractFromJson(jsonData: String, data: String): T throws IOException
        }
    }

    package java.Liberation.nacho.controller {

        class HomeController {
        }
    }

    package java.Liberation.nacho.config {

        class SpringConfig {
            + memoryCharacterRepository(): MemoryCharacterRepository
            + memoryExpRepository(): MemoryExpRepository
            + memoryBossRepository(): MemoryBossRepository
            + memoryUnionRepository(): MemoryUnionRepository
            + memoryResultRepository(): MemoryResultRepository
            + restTemplate(): RestTemplate
            + curlService(): CurlService
        }
    }

    MemoryCharacterRepository --> CharacterInfo : Manages
    MemoryBossRepository --> CharacterBoss : Manages
    MemoryExpRepository --> CharacterExp : Manages
    MemorySymbolRepository --> CharacterSymbol : Manages
    MemoryResultRepository --> Result : Manages
    MemoryUnionRepository --> Union : Manages

    MemoryBossRepository ..> JsonDataHandler : Uses
    MemoryResultRepository ..> JsonDataHandler : Uses
    MemoryUnionRepository ..> JsonDataHandler : Uses

    CharacterInfo --|> Character
    CharacterBoss --|> Character
    CharacterExp --|> Character
    CharacterSymbol --|> Character

    CurlService --|> ApiService
    UnionCurlService --|> ApiService
    MemoryCharacterRepository ..|> CharacterRepository
    MemoryBossRepository ..|> CharacterRepository
    MemoryExpRepository ..|> CharacterRepository
    MemoryResultRepository ..|> SingleRepository
    MemoryUnionRepository ..|> SingleRepository

    SpringConfig --> MemoryCharacterRepository : @Bean
    SpringConfig --> MemoryExpRepository : @Bean
    SpringConfig --> MemoryBossRepository : @Bean
    SpringConfig --> MemoryUnionRepository : @Bean
    SpringConfig --> MemoryResultRepository : @Bean
    SpringConfig --> RestTemplate : @Bean
}
@enduml
