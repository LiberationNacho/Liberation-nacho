@startuml

package java.Liberation.nacho {

    package java.Liberation.nacho.service {

        interface ClassService<T> {
            + join(t: T): void
            + find(): List<T>
            + getByName(name: String): Optional<T>
            + update(name: String, t: T): void
            + deleteByName(name: String): void
        }

        class CharacterService {
            - final CharacterRepository<Character> characterRepository

            + CharacterService(characterRepository: CharacterRepository<Character>)
            + join(character: Character): void
            - validateDuplicatedMember(character: Character): void
            + find(): List<Character>
            + getByName(name: String): Optional<Character>
            + update(name: String, updatedCharacter: Character): void
            + deleteByName(name: String): void
        }

        class CharacterBossService {
            + join(characterBoss: CharacterBoss): void
            + find(): List<CharacterBoss>
            + getByName(name: String): Optional<CharacterBoss>
            + update(name: String, characterBoss: CharacterBoss): void
            + deleteByName(name: String): void
        }

        class CharacterExpService {
            + join(characterExp: CharacterExp): void
            + find(): List<CharacterExp>
            + getByName(name: String): Optional<CharacterExp>
            + update(name: String, characterExp: CharacterExp): void
            + deleteByName(name: String): void
        }

        class ResultService {
            + join(result: Result): void
            + find(): List<Result>
            + getByName(name: String): Optional<Result>
            + update(name: String, result: Result): void
            + deleteByName(name: String): void
        }

        class UnionService {
            + join(union: Union): void
            + find(): List<Union>
            + getByName(name: String): Optional<Union>
            + update(name: String, union: Union): void
            + deleteByName(name: String): void
        }

        abstract class ApiService {
            - String apiKey

            + buildUrl(baseUrl: String, queryParams: String...): String
            + getApiResponse(url: String): String throws IOException
            + handleApiCall(baseUrl: String, queryParams: String...): String
        }

        class CharacterCurlService {
            - String apiKey
            - final MemoryCharacterRepository characterRepository
            - final MemoryCharacterExpRepository characterExpRepository
            - String date

            + CharacterCurlService(characterRepository: MemoryCharacterRepository, characterExpRepository: MemoryCharacterExpRepository)
            + getCharacterOcid(characterName: String): String
            + getCharacterInfo(ocid: String): String
            + getCharacterStat(ocid: String): String
            + getCharacterSymbol(ocid: String): String
            + getCharacterSkill(ocid: String, grade: int): String
            + getCharacterHexaCore(ocid: String): String
            + getCharacterUnion(ocid: String): String
            + updateCharacterOcid(): void throws IOException, InterruptedException
            + updateCharacterInfo(): void throws IOException, InterruptedException
            + updateCharacterStat(): void throws IOException, InterruptedException
            + updateCharacterSymbol(): void throws IOException, InterruptedException
            + updateCharacterSkill(): void throws IOException, InterruptedException
            + updateCharacterHexaCore(): void throws IOException, InterruptedException
        }

        class UnionCurlService {
            - final MemoryUnionRepository unionRepository

            + UnionCurlService(unionRepository: MemoryUnionRepository)
            + updateUnionInfo(): void throws IOException, InterruptedException
        }
    }

    package java.Liberation.nacho.repository {

        interface CharacterRepository<T> {
            + init(): void
            + load(): void
            + save(character: T): void
            + findByName(name: String): Optional<T>
            + findAll(): List<T>
            + deleteByName(name: String): void
        }

        interface SingleRepository<T> {
            + init(): void
            + load(): void
            + save(t: T): void
            + get(): Optional<T>
        }

        class MemoryCharacterRepository {
            - static Map<String, Character> characterStore

            + init(): void
            + load(): void
            + save(character: Character): void
            + findByName(name: String): Optional<Character>
            + findAll(): List<Character>
            + deleteByName(name: String): void
        }

        class MemoryCharacterBossRepository {
            - static Map<String, CharacterBoss> characterBossStore

            + init(): void
            + load(): void
            + save(characterBoss: CharacterBoss): void
            + findByName(name: String): Optional<CharacterBoss>
            + findAll(): List<CharacterBoss>
            + deleteByName(name: String): void
        }

        class MemoryCharacterExpRepository {
            - static Map<String, CharacterExp> characterExpStore

            + init(): void
            + load(): void
            + save(characterExp: CharacterExp): void
            + findByName(name: String): Optional<CharacterExp>
            + findAll(): List<CharacterExp>
            + deleteByName(name: String): void
        }

        class MemoryResultRepository {
            - static Result resultStore

            + init(): void
            + load(): void
            + save(result: Result): void
            + get(): Optional<Result>
        }

        class MemoryUnionRepository {
            - static Union unionStore

            + init(): void
            + load(): void
            + save(union: Union): void
            + get(): Optional<Union>
        }
    }

    package java.Liberation.nacho.domain {

        class Character {
            - String name
            - String ocid
            - String characterClass
            - int finalCombat
            - int level
            - String image
            - boolean liberation
            - boolean millionSuccess

            + getName(): String
            + getOcid(): String
            + getCharacterClass(): String
            + getFinalCombat(): int
            + getLevel(): int
            + getImage(): String
            + getLiberation(): boolean
            + getMillionSuccess(): boolean

            + setName(name: String): void
            + setOcid(ocid: String): void
            + setCharacterClass(characterClass: String): void
            + setFinalCombat(finalCombat: int): void
            + setLevel(level: int): void
            + setImage(image: String): void
            + setLiberation(liberation: boolean): void
            + setMillionSuccess(millionSuccess: boolean): void
        }

        class CharacterBoss {
            - String name
            - String characterClass
            - String image
            - boolean vanLeon
            - boolean akayrum
            - boolean magnus
            - boolean lotus
            - boolean damien
            - boolean lucid
            - boolean will
            - boolean verusHilla

            + getName(): String
            + getCharacterClass(): String
            + getImage(): String
            + isVanLeon(): boolean
            + isAkayrum(): boolean
            + isMagnus(): boolean
            + isLotus(): boolean
            + isDamien(): boolean
            + isLucid(): boolean
            + isWill(): boolean
            + isVerusHilla(): boolean

            + setName(name: String): void
            + setCharacterClass(characterClass: String): void
            + setImage(image: String): void
            + setVanLeon(vanLeon: boolean): void
            + setAkayrum(akayrum: boolean): void
            + setMagnus(magnus: boolean): void
            + setLotus(lotus: boolean): void
            + setDamien(damien: boolean): void
            + setLucid(lucid: boolean): void
            + setWill(will: boolean): void
            + setVerusHilla(verusHilla: boolean): void
        }

        class CharacterExp {
            - String name
            - String ocid
            - String characterClass
            - Map<String, Integer> character_level
            - Map<String, Integer> character_exp
            - Map<String, Integer> character_exp_rate

            + getName(): String
            + getOcid(): String
            + getCharacterClass(): String
            + getCharacter_level(): Map<String, Integer>
            + getCharacter_exp(): Map<String, Integer>
            + getCharacter_exp_rate(): Map<String, Integer>

            + setName(name: String): void
            + setOcid(ocid: String): void
            + setCharacterClass(characterClass: String): void
            + setCharacter_level(character_level: Map<String, Integer>): void
            + setCharacter_exp(character_exp: Map<String, Integer>): void
            + setCharacter_exp_rate(character_exp_rate: Map<String, Integer>): void
        }

        class Result {
            - String date
            - double jobRate
            - double liberationRate
            - int sumLevel
            - long sumCombat
            - double avgLevel
            - double avgCombat

            + getDate(): String
            + getJobRate(): double
            + getLiberationRate(): double
            + getSumLevel(): int
            + getSumCombat(): long
            + getAvgLevel(): double
            + getAvgCombat(): double

            + setDate(date: String): void
            + setJobRate(jobRate: double): void
            + setLiberationRate(liberationRate: double): void
            + setSumLevel(sumLevel: int): void
            + setSumCombat(sumCombat: long): void
            + setAvgLevel(avgLevel: double): void
            + setAvgCombat(avgCombat: double): void
        }

        class Union {
            - String date
            - int unionLevel
            - String unionGrade
            - int unionArtifactLevel
            - int unionArtifactExp
            - int unionArtifactPoint

            + getDate(): String
            + getUnionLevel(): int
            + getUnionGrade(): String
            + getUnionArtifactLevel(): int
            + getUnionArtifactExp(): int
            + getUnionArtifactPoint(): int

            + setDate(date: String): void
            + setUnionLevel(unionLevel: int): void
            + setUnionGrade(unionGrade: String): void
            + setUnionArtifactLevel(unionArtifactLevel: int): void
            + setUnionArtifactExp(unionArtifactExp: int): void
            + setUnionArtifactPoint(unionArtifactPoint: int): void
        }
    }

    package java.Liberation.nacho.util {

        class JsonDataHandler {
            - static final String JSON_DATA_PATH = ""
            - static final ObjectMapper objectMapper

            + static <T> T loadJson(filePath: String, valueType: Class<T>): T throws IOException
            + static <T> void saveJson(data: T, filePath: String): void throws IOException
            + static <T> T loadJson(filePath: String, valueTypeRef: TypeReference<T>): T throws IOException
            + static <T> T extractFromJson(jsonData: String, data: String): T throws IOException
        }

        class DataProcessor {
            // Add methods here if needed
        }
    }

    package java.Liberation.nacho.controller {

        class HomeController {
            - final CharacterService characterService
            - final CharacterCurlService characterCurlService

            + HomeController(characterService: CharacterService, characterCurlService: CharacterCurlService)
            + list(model: Model): String
            + expHistory(): String
            + getCharacterOcid(model: Model): String
        }
    }

    package java.Liberation.nacho.config {

        class SpringConfig {
            + memoryCharacterRepository(): MemoryCharacterRepository
            + memoryCharacterExpRepository(): MemoryCharacterExpRepository
            + memoryCharacterBossRepository(): MemoryCharacterBossRepository
            + memoryUnionRepository(): MemoryUnionRepository
            + memoryResultRepository(): MemoryResultRepository
            + restTemplate(): RestTemplate
            + characterCurlService(): CharacterCurlService
            + characterService(): CharacterService
            + characterBossService(): CharacterBossService
            + characterExpService(): CharacterExpService
            + resultService(): ResultService
            + unionService(): UnionService
        }
    }

    HomeController --> CharacterService : Uses
    HomeController --> CharacterCurlService : Uses

    CharacterService --> MemoryCharacterRepository : Uses
    CharacterCurlService --> MemoryCharacterRepository : Uses
    CharacterCurlService --> MemoryCharacterExpRepository : Uses
    UnionCurlService --> MemoryUnionRepository : Uses

    CharacterService --> Character : Manages
    CharacterBossService --> CharacterBoss : Manages
    CharacterExpService --> CharacterExp : Manages
    ResultService --> Result : Manages
    UnionService --> Union : Manages

    MemoryCharacterRepository --> Character : Manages
    MemoryCharacterBossRepository --> CharacterBoss : Manages
    MemoryCharacterExpRepository --> CharacterExp : Manages
    MemoryResultRepository --> Result : Manages
    MemoryUnionRepository --> Union : Manages

    MemoryCharacterBossRepository ..> JsonDataHandler : Uses
    MemoryResultRepository ..> JsonDataHandler : Uses
    MemoryUnionRepository ..> JsonDataHandler : Uses

    ClassService <|.. CharacterService
    ClassService <|.. CharacterBossService
    ClassService <|.. CharacterExpService
    ClassService <|.. ResultService
    ClassService <|.. UnionService

    ApiService <|-- CharacterCurlService
    ApiService <|-- UnionCurlService
    CharacterRepository <|.. MemoryCharacterRepository
    CharacterRepository <|.. MemoryCharacterBossRepository
    CharacterRepository <|.. MemoryCharacterExpRepository
    SingleRepository <|.. MemoryResultRepository
    SingleRepository <|.. MemoryUnionRepository

    SpringConfig --> MemoryCharacterRepository : @Bean
    SpringConfig --> MemoryCharacterExpRepository : @Bean
    SpringConfig --> MemoryCharacterBossRepository : @Bean
    SpringConfig --> MemoryUnionRepository : @Bean
    SpringConfig --> MemoryResultRepository : @Bean
    SpringConfig --> RestTemplate : @Bean
    SpringConfig --> CharacterCurlService : @Bean
    SpringConfig --> CharacterService : @Bean
    SpringConfig --> CharacterBossService : @Bean
    SpringConfig --> CharacterExpService : @Bean
    SpringConfig --> ResultService : @Bean
    SpringConfig --> UnionService : @Bean
}
@enduml
